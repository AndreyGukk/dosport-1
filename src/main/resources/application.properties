server.port=8080
server.servlet.context-path=/

# Разрешаем использование скрытых методов, etc DeleteMapping
spring.mvc.hiddenmethod.filter.enabled=true

spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQL94Dialect
spring.jpa.properties.hibernate.temp.use_jdbc_metadata_defaults = false

spring.datasource.driver-class-name=org.postgresql.Driver
spring.datasource.url=${SPRING_DATASOURCE_URL:jdbc:postgresql://localhost:5432/postgres?currentSchema=dosport}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME:postgres}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD:admin}

# Включаем логгирование
logging.level.root=INFO
logging.level.org.springframework.security=DEBUG

server.error.include-message=always
server.error.include-binding-errors=always

#Настройки email-a
spring.mail.host=smtp.rambler.ru
spring.mail.port=465
spring.mail.username=${SPRING_MAIL_USERNAME}
spring.mail.password=${SPRING_MAIL_PASSWORD}
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.starttls.required=true
spring.mail.protocol=smtps
mail.debug=true

# Настройки регистрации через соцсети
#spring.security.oauth2.client.registration.bitbucket.client-id=${SPRING_BITBUCKET_CLIENT_ID}
#spring.security.oauth2.client.registration.bitbucket.client-secret=${SPRING_BITBUCKET_CLIENT_SECRET}
#spring.security.oauth2.client.registration.bitbucket.client-authentication-method=basic
#spring.security.oauth2.client.registration.bitbucket.authorization-grant-type=authorization_code
#spring.security.oauth2.client.registration.bitbucket.redirect-uri = http://localhost:8080/oauth2/callback/bitbucket
#spring.security.oauth2.client.registration.bitbucket.provider=bitbucket
#spring.security.oauth2.client.provider.bitbucket.token-uri=https://bitbucket.org/site/oauth2/access_token
#spring.security.oauth2.client.provider.bitbucket.user-info-uri=http://localhost:8080/api/v1/profile
#spring.security.oauth2.client.provider.bitbucket.user-name-attribute=username
#spring.security.oauth2.client.provider.bitbucket.authorization-uri=https://bitbucket.org/site/oauth2/authorize

spring.security.oauth2.client.registration.yandex.client-id=${SPRING_YANDEX_CLIENT_ID}
spring.security.oauth2.client.registration.yandex.client-secret=${SPRING_YANDEX_CLIENT_SECRET}
spring.security.oauth2.client.registration.yandex.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.yandex.redirect-uri =  http://localhost:8080/api/v1/oauth2/callback/yandex
spring.security.oauth2.client.registration.yandex.provider=yandex
spring.security.oauth2.client.provider.yandex.token-uri=https://oauth.yandex.ru/token
spring.security.oauth2.client.provider.yandex.authorization-uri=http://oauth.yandex.ru/authorize
spring.security.oauth2.client.provider.yandex.user-name-attribute=id
spring.security.oauth2.client.provider.yandex.user-info-uri= https://login.yandex.ru/info

spring.security.oauth2.client.registration.mail.client-id=${SPRING_MAIL_CLIENT_ID}
spring.security.oauth2.client.registration.mail.client-secret=${SPRING_MAIL_CLIENT_SECRET}
spring.security.oauth2.client.registration.mail.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.mail.client-authentication-method=basic
spring.security.oauth2.client.registration.mail.redirect-uri =http://localhost:8080/api/v1/oauth2/callback/mail
spring.security.oauth2.client.registration.mail.scope=userinfo
spring.security.oauth2.client.registration.mail.provider=mail
spring.security.oauth2.client.provider.mail.token-uri=https://oauth.mail.ru/token
spring.security.oauth2.client.provider.mail.authorization-uri=https://oauth.mail.ru/login
spring.security.oauth2.client.provider.mail.user-name-attribute=id
spring.security.oauth2.client.provider.mail.user-info-uri=https://oauth.mail.ru/userinfo

spring.security.oauth2.client.registration.vk.client-id=${SPRING_VK_CLIENT_ID}
spring.security.oauth2.client.registration.vk.client-secret=${SPRING_VK_CLIENT_SECRET}
spring.security.oauth2.client.registration.vk.client-authentication-method=post
spring.security.oauth2.client.registration.vk.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.vk.redirect-uri = http://localhost:8080/api/v1/oauth2/callback/vk
spring.security.oauth2.client.registration.vk.scope= email,profile
spring.security.oauth2.client.registration.vk.provider=vk
spring.security.oauth2.client.provider.vk.token-uri=https://oauth.vk.com/access_token
spring.security.oauth2.client.provider.vk.authorization-uri=http://oauth.vk.com/authorize
spring.security.oauth2.client.provider.vk.user-name-attribute=id
spring.security.oauth2.client.provider.vk.user-info-uri= https://api.vk.com/method/users.get?{id}&v=5.95&fields=email,sex,bdate,photo_max,&display=popup&lang=ru&access_token=xxxxx

spring.security.oauth2.client.registration.google.client-id=${SPRING_GOOGLE_CLIENT_ID}
spring.security.oauth2.client.registration.google.client-secret=${SPRING_GOOGLE_CLIENT_SECRET}
spring.security.oauth2.client.registration.google.redirect-uri = http://localhost:8080/api/v1/oauth2/callback/google
spring.security.oauth2.client.registration.google.scope= email, profile
spring.security.oauth2.client.registration.google.client-authentication-method=basic

spring.security.oauth2.client.registration.facebook.client-id=${SPRING_FACEBOOK_CLIENT_ID}
spring.security.oauth2.client.registration.facebook.client-secret=${SPRING_FACEBOOK_CLIENT_SECRET}
spring.security.oauth2.client.registration.facebook.redirect-uri = http://localhost:8080/api/v1/oauth2/callback/facebook
spring.security.oauth2.client.registration.facebook.scope= email, public_profile
spring.security.oauth2.client.registration.facebook.client-authentication-method=post

spring.security.oauth2.client.registration.github.client-id=${SPRING_GITHUB_CLIENT_ID}
spring.security.oauth2.client.registration.github.client-secret=${SPRING_GITHUB_CLIENT_SECRET}
spring.security.oauth2.client.registration.github.redirect-uri = http://localhost:8080/api/v1/oauth2/callback/github
spring.security.oauth2.client.registration.github.scope= email, profile
spring.security.oauth2.client.registration.github.client-authentication-method=basic

# Настройки активации пользователя
app.user.activation_url =http://localhost:8080/api/v1/auth/activate/

# Настройки жизни токена и переадресации после регистрации через соцсеть
app.auth.tokenSecret = ${SPRING_TOKEN_SECRET}
app.auth.tokenExpirationMsec = 864000000
app.oauth2.authorizedRedirectUris[0] = http://localhost:3000/oauth2/redirect
app.oauth2.authorizedRedirectUris[1] = myandroidapp://oauth2/redirect
app.oauth2.authorizedRedirectUris[2] = myiosapp://oauth2/redirect


